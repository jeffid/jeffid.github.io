[{"categories":null,"content":"Elasticsearch的标准版本及以上是支持设置同义词功能的, 其实也就是除了OSS(开源)版以外其它的都支持. ","date":"2020-06-10","objectID":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/:0:0","tags":null,"title":"Elasticsearch中文同义词","uri":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/"},{"categories":null,"content":"环境说明 Elasticsearch 7.6.x 与ES相匹配的IK分词插件 示例中会分别使用到shell命令和Kibana, 以$开头的代表是shell命令, 否则表示Kibana的console命令 ","date":"2020-06-10","objectID":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/:1:0","tags":null,"title":"Elasticsearch中文同义词","uri":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/"},{"categories":null,"content":"操作 同义词可以使用 synonym 参数来内嵌指定，或者必须 存在于集群每一个节点上的同义词文件中。 同义词文件路径由 synonyms_path 参数指定，应绝对或相对于 Elasticsearch config 目录。 下面以同义词的两种设置方式来介绍: ","date":"2020-06-10","objectID":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/:2:0","tags":null,"title":"Elasticsearch中文同义词","uri":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/"},{"categories":null,"content":"同义词文件方式 设置同义词文件 # 进入Elasticsearch目录执行,生成文件 $ echo '\"iPhone,苹果手机 =\u003e iPhone,苹果手机\", \"2233,22娘,33娘 =\u003e bilibili,B站\"' \u003e config/analysis/synonyms.txt 创建索引 PUT /goods2 { \"settings\": { \"analysis\": { \"filter\": { \"my_synonym_filter\": { \"type\": \"synonym\", \"updateable\": true, \"synonyms_path\": \"analysis/synonyms.txt\" } }, \"analyzer\": { \"my_synonyms_analyzer\": { \"tokenizer\": \"ik_smart\", \"filter\": [ \"my_synonym_filter\" ] } } } }, \"mappings\": { \"properties\": { \"title\": { \"type\": \"text\", \"analyzer\": \"ik_smart\", \"search_analyzer\": \"my_synonyms_analyzer\" } } } } my_synonym_filter是自定义的词汇过滤器, my_synonyms_analyzer是自定义的分析器, 可以看出后者是包含并引用了前者的. 在本索引中自定义的词汇过虑器和分析器也只能在当前索引中使用. updateable指示能否动态更新, 必须为true才能动态更新同义词 synonyms_path指示同义词文件的位置 analysis.analyzer.tokenizer指示在这个分析器里用ik_smart的分词器, 在这个索引中的分析链是原始文本 =\u003e 分词器 =\u003e 词汇过滤器, 即原始文本先经过分词的结果再用来给词汇过滤器处理(在这个索引的作用是同义词). mappings.properties.title.search_analyzer指示title字段在查询时使用my_synonyms_analyzer分析器, 同理mappings.properties.title.analyzer指示其在索引时使用的分析器. 查看分析结果 第一行分词的效果 # 字母大小写没有影响 GET goods2/_analyze { \"analyzer\": \"my_synonyms_analyzer\", \"text\": \"iphone\" } GET goods2/_analyze { \"analyzer\": \"my_synonyms_analyzer\", \"text\": \"苹果手机\" } 上面两条语句的结果是一样的 { \"tokens\" : [ { \"token\" : \"iphone\", \"start_offset\" : 0, \"end_offset\" : 6, \"type\" : \"ENGLISH\", \"position\" : 0 }, { \"token\" : \"苹果\", \"start_offset\" : 0, \"end_offset\" : 6, \"type\" : \"SYNONYM\", \"position\" : 0 }, { \"token\" : \"手机\", \"start_offset\" : 0, \"end_offset\" : 6, \"type\" : \"SYNONYM\", \"position\" : 1 } ] } 第二行分词的效果 GET goods2/_analyze { \"analyzer\": \"my_synonyms_analyzer\", \"text\": \"2233\" } GET goods2/_analyze { \"analyzer\": \"my_synonyms_analyzer\", \"text\": \"22娘\" } 结果 { \"tokens\" : [ { \"token\" : \"bilibili\", \"start_offset\" : 0, \"end_offset\" : 4, \"type\" : \"SYNONYM\", \"position\" : 0 }, { \"token\" : \"b\", \"start_offset\" : 0, \"end_offset\" : 4, \"type\" : \"SYNONYM\", \"position\" : 0 }, { \"token\" : \"站\", \"start_offset\" : 0, \"end_offset\" : 4, \"type\" : \"SYNONYM\", \"position\" : 1 } ] } 变更同义词并更新索引 # 进入Elasticsearch目录执行,生成文件 # `iPhone,苹果手机 =\u003e iPhone,苹果手机`与`iPhone,苹果手机`的效果是一样的 # 内容中的双引号`\"`和行末的逗号`,`不是必须的(没有的话须要有换行符), 这里只是为了和和内嵌式的保持一致才这么写的 $ echo '\"iPhone,苹果手机\", \"2233,22娘,33娘 =\u003e bilibili,B站,二次元\"' \u003e config/analysis/synonyms.txt # 使新的同义词生效 POST /goods2/_reload_search_analyzers 变更同义词后的第二行分词的效果 GET goods2/_analyze { \"analyzer\": \"my_synonyms_analyzer\", \"text\": \"2233\" } 结果 { \"tokens\" : [ { \"token\" : \"bilibili\", \"start_offset\" : 0, \"end_offset\" : 4, \"type\" : \"SYNONYM\", \"position\" : 0 }, { \"token\" : \"b\", \"start_offset\" : 0, \"end_offset\" : 4, \"type\" : \"SYNONYM\", \"position\" : 0 }, { \"token\" : \"二次元\", \"start_offset\" : 0, \"end_offset\" : 4, \"type\" : \"SYNONYM\", \"position\" : 0 }, { \"token\" : \"站\", \"start_offset\" : 0, \"end_offset\" : 4, \"type\" : \"SYNONYM\", \"position\" : 1 } ] } ","date":"2020-06-10","objectID":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/:2:1","tags":null,"title":"Elasticsearch中文同义词","uri":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/"},{"categories":null,"content":"内嵌方式 创建索引 同义词配置就在synonyms属性里 PUT /goods3 { \"settings\": { \"analysis\": { \"filter\": { \"my_synonym_filter\": { \"type\": \"synonym\", \"synonyms\": [ \"iPhone,苹果手机 =\u003e iPhone,苹果手机\", \"2233,22娘,33娘 =\u003e bilibili,B站\" ] } }, \"analyzer\": { \"my_synonyms_analyzer\": { \"tokenizer\": \"ik_smart\", \"filter\": [ \"my_synonym_filter\" ] } } } }, \"mappings\": { \"properties\": { \"title\": { \"type\": \"text\", \"analyzer\": \"ik_smart\", \"search_analyzer\": \"my_synonyms_analyzer\" } } } } 查看分析结果 下面的结果跟同义词文件方式的是一样的 GET goods3/_analyze { \"analyzer\": \"my_synonyms_analyzer\", \"text\": \"iphone\" } GET goods3/_analyze { \"analyzer\": \"my_synonyms_analyzer\", \"text\": \"2233\" } 变更同义词并更新索引 # 须要先关闭索引才能变更设置 POST /goods3/_close PUT /goods3/_settings/ { \"analysis\": { \"filter\": { \"my_synonym_filter\": { \"type\": \"synonym\", \"synonyms\": [ \"iPhone,苹果手机\", \"2233,22娘,33娘 =\u003e bilibili,B站,二次元\" ] } } } } # 重新开启索引 POST /goods3/_open ","date":"2020-06-10","objectID":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/:2:2","tags":null,"title":"Elasticsearch中文同义词","uri":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/"},{"categories":null,"content":"查询实践 以索引goods2为例 # 插入一条数据 POST /goods2/_doc/1 { \"title\":\"bilibili是个好平台\" } # 通过`2233`关键词查找 GET /goods2/_search { \"query\": { \"match\": { \"title\": \"2233\" } } } 结果 { \"took\" : 0, \"timed_out\" : false, \"_shards\" : { \"total\" : 1, \"successful\" : 1, \"skipped\" : 0, \"failed\" : 0 }, \"hits\" : { \"total\" : { \"value\" : 1, \"relation\" : \"eq\" }, \"max_score\" : 0.2876821, \"hits\" : [ { \"_index\" : \"goods2\", \"_type\" : \"_doc\", \"_id\" : \"1\", \"_score\" : 0.2876821, \"_source\" : { \"title\" : \"bilibili是个好平台\" } } ] } } ","date":"2020-06-10","objectID":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/:2:3","tags":null,"title":"Elasticsearch中文同义词","uri":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/"},{"categories":null,"content":"总结 在Elasticsearch中设置同义词有内嵌式和同义词文件式两种 同义词文件式可以在不关闭索引的情况下动态更新同义词 ","date":"2020-06-10","objectID":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/:3:0","tags":null,"title":"Elasticsearch中文同义词","uri":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/"},{"categories":null,"content":"参考资料 Elasticsearch Reference 7.6 重载分析器API Elasticsearch: 权威指南 Elastic Stack 各版本的区别 ","date":"2020-06-10","objectID":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/:4:0","tags":null,"title":"Elasticsearch中文同义词","uri":"/106_es_%E5%90%8C%E4%B9%89%E8%AF%8D/"},{"categories":null,"content":"说明 本文是学习Learnku的 电商课程 Elasticsearch(下面将称之为:ES)部分的学习笔记,主要介绍常见的电商商品数据如何存入ES和查询出来.ES作为搜索引擎,相比数据库的SQL搜索语句可以实现更多丰富的筛选条件. 常见的使用方法是:先按用户的搜索条件从ES中查询出关键信息(如id),然后直接列表返回给用户,或是根据ES结果作为SQL条件再从数据库中查询. 本文仅以DSL作为查询示例,不会涉及在各个编程语言中的实现代码. ","date":"2020-04-15","objectID":"/105_es_goods_search/:1:0","tags":null,"title":"电商商品信息Elasticsearch索引结构与查询示例","uri":"/105_es_goods_search/"},{"categories":null,"content":"操作环境 Elasticsearch 7.6.x 与ES相匹配的IK分词插件 ","date":"2020-04-15","objectID":"/105_es_goods_search/:1:1","tags":null,"title":"电商商品信息Elasticsearch索引结构与查询示例","uri":"/105_es_goods_search/"},{"categories":null,"content":"商品信息数据结构 下面的SQL是创建商品相关表和插入数据的语句, 本文主要着重介绍的是在这种数据结构下ES的索引结构和查询写法,所以这些SQL不实际执行也不会影响到后面说到的DSL操作的. #商品信息主表CREATETABLE`products`(`id`bigintunsignedNOTNULLAUTO_INCREMENT,`type`varchar(255)COLLATEutf8mb4_unicode_ciNOTNULLDEFAULT'normal',`category_id`bigintunsignedDEFAULTNULL,`title`varchar(255)COLLATEutf8mb4_unicode_ciNOTNULL,`long_title`varchar(255)COLLATEutf8mb4_unicode_ciNOTNULL,`description`textCOLLATEutf8mb4_unicode_ciNOTNULL,`image`varchar(255)COLLATEutf8mb4_unicode_ciNOTNULL,`on_sale`tinyint(1)NOTNULLDEFAULT'1',`rating`double(8,2)NOTNULLDEFAULT'5.00',`sold_count`intunsignedNOTNULLDEFAULT'0',`review_count`intunsignedNOTNULLDEFAULT'0',`price`decimal(10,2)NOTNULL,`created_at`timestampNULLDEFAULTNULL,`updated_at`timestampNULLDEFAULTNULL,PRIMARYKEY(`id`),KEY`products_category_id_foreign`(`category_id`),KEY`products_type_index`(`type`))ENGINE=InnoDBAUTO_INCREMENT=100DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_unicode_ci#端口的sku表,每个库存单位占一条,如:同款手机的不同版本就各算作一个库存单位,对应的价格可能也不一样的,主要用来确定货单价和库存的#与主表关联CREATETABLE`product_skus`(`id`bigintunsignedNOTNULLAUTO_INCREMENT,`title`varchar(255)COLLATEutf8mb4_unicode_ciNOTNULL,`description`varchar(255)COLLATEutf8mb4_unicode_ciNOTNULL,`price`decimal(10,2)NOTNULL,`stock`intunsignedNOTNULL,`product_id`bigintunsignedNOTNULL,`created_at`timestampNULLDEFAULTNULL,`updated_at`timestampNULLDEFAULTNULL,PRIMARYKEY(`id`),KEY`product_skus_product_id_foreign`(`product_id`),CONSTRAINT`product_skus_product_id_foreign`FOREIGNKEY(`product_id`)REFERENCES`products`(`id`)ONDELETECASCADE)ENGINE=InnoDBAUTO_INCREMENT=295DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_unicode_ci#商品的详细属性,每个属性占一条,不同商品之间允许存在同名的属性,如:A手机的`内存`属性值为`8G`,主要用来展示属性和筛选商品的#与主表关联CREATETABLE`product_properties`(`id`bigintunsignedNOTNULLAUTO_INCREMENT,`product_id`bigintunsignedNOTNULL,`name`varchar(255)COLLATEutf8mb4_unicode_ciNOTNULL,`value`varchar(255)COLLATEutf8mb4_unicode_ciNOTNULL,PRIMARYKEY(`id`),KEY`product_properties_product_id_foreign`(`product_id`),CONSTRAINT`product_properties_product_id_foreign`FOREIGNKEY(`product_id`)REFERENCES`products`(`id`)ONDELETECASCADE)ENGINE=InnoDBAUTO_INCREMENT=27DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_unicode_ci 对应的数据记录 INSERTINTO`products`(`id`,`type`,`category_id`,`title`,`long_title`,`description`,`image`,`on_sale`,`rating`,`sold_count`,`review_count`,`price`,`created_at`,`updated_at`)VALUES(91,'normal',13,'Kingston/金士顿 HX424C15FB/8','金士顿 骇客神条 ddr4 2400 8g 台式机 电脑 四代内存条 吃鸡内存','\u003cp\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i3/704392951/TB25akyqsuYBuNkSmRyXXcA3pXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i1/704392951/TB288x6y25TBuNjSspmXXaDRVXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i1/704392951/TB2ck46y7CWBuNjy0FaXXXUlXXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i2/704392951/TB2_OV3y1uSBuNjSsziXXbq8pXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i3/704392951/TB2F9KZiP7nBKNjSZLeXXbxCFXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i4/704392951/TB2XQ06y7CWBuNjy0FaXXXUlXXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i2/704392951/TB20Tl7y4SYBuNjSspjXXX73VXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i2/704392951/TB2QygAqDdYBeNkSmLyXXXfnVXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i3/704392951/TB2C6S5qyCYBuNkHFCcXXcHtVXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i2/704392951/TB2J_pByYGYBuNjy0FoXXciBFXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i2/704392951/TB2520Ny29TBuNjy1zbXXXpepXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i4/704392951/TB2ozkLyFmWBuNjSspdXXbugXXa_!!704392951.jpg\\\" /\u003e\u003cimg src=\\\"https://img.alicdn.com/imgextra/i4/704392951/TB2S9IFiOAnBKNjSZFvXXaTKXXa_!!704392951.jpg\\\" /\u003e\u003c/p\u003e\u003cp\u003e\u003cimg alt=\\\"\\\" src=\\\"https://gdp.alicdn.com/imgextra/i4/704392951/TB2KpHwfviSBuNkSnhJXXbDcpXa_!!704392951.jpg\\\" /\u003e\u003c/p\u003e','https://img.alicdn.com/bao/uploaded/i2/TB1iqkaLVXXXXagXXXXObG1FpXX_091208.jpg_b.jpg',1,5.00,0,0,'399.00','202","date":"2020-04-15","objectID":"/105_es_goods_search/:2:0","tags":null,"title":"电商商品信息Elasticsearch索引结构与查询示例","uri":"/105_es_goods_search/"},{"categories":null,"content":"ES操作 下面是重点 ","date":"2020-04-15","objectID":"/105_es_goods_search/:3:0","tags":null,"title":"电商商品信息Elasticsearch索引结构与查询示例","uri":"/105_es_goods_search/"},{"categories":null,"content":"存入 创建索引 # 创建索引`products`,`pretty`参数表示返回的结果以美化的格式输出 curl -XPUT http://localhost:9200/products?pretty # 设置索引的属性,`skus`后的一个嵌套属性`properties`并不是关键字,是自定义的名称,指代`product_properties`表的数据 curl -XPUT http://localhost:9200/products/_mapping/?pretty -H 'Content-Type: application/json' -d '{ \"properties\": { \"type\": { \"type\": \"keyword\" } , \"title\": { \"type\": \"text\", \"analyzer\": \"ik_smart\" }, \"long_title\": { \"type\": \"text\", \"analyzer\": \"ik_smart\" }, \"category_id\": { \"type\": \"integer\" }, \"category\": { \"type\": \"keyword\" }, \"category_path\": { \"type\": \"keyword\" }, \"description\": { \"type\": \"text\", \"analyzer\": \"ik_smart\" }, \"price\": { \"type\": \"scaled_float\", \"scaling_factor\": 100 }, \"on_sale\": { \"type\": \"boolean\" }, \"rating\": { \"type\": \"float\" }, \"sold_count\": { \"type\": \"integer\" }, \"review_count\": { \"type\": \"integer\" }, \"skus\": { \"type\": \"nested\", \"properties\": { \"title\": { \"type\": \"text\", \"analyzer\": \"ik_smart\", \"copy_to\": \"skus_title\" }, \"description\": { \"type\": \"text\", \"analyzer\": \"ik_smart\", \"copy_to\": \"skus_description\" }, \"price\": { \"type\": \"scaled_float\", \"scaling_factor\": 100 } } }, \"properties\": { \"type\": \"nested\", \"properties\": { \"name\": { \"type\": \"keyword\" }, \"value\": { \"type\": \"keyword\", \"copy_to\": \"properties_value\" }, \"search_value\": { \"type\": \"keyword\"} } } } }' \"analyzer\": \"ik_smart\" 代表这个字段需要使用 IK 中文分词器分词，在前面的章节也介绍过了。 还有有一些字段的类型是 keyword，这是字符串类型的一种，这种类型是告诉 Elasticsearch 不需要对这个字段做分词，通常用于邮箱、标签、属性等字段。 scaled_float 代表一个小数位固定的浮点型字段，与 Mysql 的 decimal 类型类似，后面的 scaling_factor 用来指定小数位精度，100 就代表精确到小数点后两位。 skus 和 properties 的字段类型是 nested，代表这个字段是一个复杂对象，由下一级的 properties 字段定义这个对象的字段。有同学可能会问，我们的『商品 SKU』和『商品属性』明明是对象数组，为什么这里可以定义成对象？这是 Elasticsearch 的另外一个特性，每个字段都可以保存多个值，这也是 Elasticsearch 的类型没有数组的原因，因为不需要，每个字段都可以是数组。 注意看 skus.title 字段的定义里加入了 copy_to 参数，值是 skus_title，Elasticsearch 就会把这个字段值复制到 skus_title 字段里，这样就可以在 multi_match 的 fields 里通过 skus_title 来匹配。skus.description 和 properties.name 同理。 请确保 Elasticsearch 返回了 \"acknowledged\" : true，否则就要检查提交的内容是否有问题。 导入数据到ES shell命令连接ES按照索引的数据结构导入3条数据 category curl -XPUT http://localhost:9200/products/_doc/91?pretty -H'Content-Type: application/json' -d'{\"id\":91,\"type\":\"normal\",\"category_id\":13,\"title\":\"Kingston\\/金士顿 HX424C15FB\\/8\",\"long_title\":\"金士顿 骇客神条 ddr4 2400 8g 台式机 电脑 四代内存条 吃鸡内存\",\"on_sale\":true,\"rating\":5,\"sold_count\":0,\"review_count\":0,\"price\":\"399.00\",\"category\":[\"电脑配件\",\"内存\"],\"category_path\":\"-10-\",\"description\":\"\",\"skus\":[{\"title\":\"8GB 黑色\",\"description\":\"8GB 2400 DDR4 黑色\",\"price\":\"549.00\"},{\"title\":\"8GB 绿色\",\"description\":\"8GB 2400 DDR4 绿色\",\"price\":\"529.00\"},{\"title\":\"16GB\",\"description\":\"2400 16GB\",\"price\":\"1299.00\"},{\"title\":\"4GB\",\"description\":\"2400 4GB\",\"price\":\"399.00\"}],\"properties\":[{\"name\":\"品牌名称\",\"value\":\"金士顿\",\"search_value\":\"品牌名称:金士顿\"},{\"name\":\"内存容量\",\"value\":\"8GB\",\"search_value\":\"内存容量:8GB\"},{\"name\":\"传输类型\",\"value\":\"DDR4\",\"search_value\":\"传输类型:DDR4\"},{\"name\":\"内存容量\",\"value\":\"4GB\",\"search_value\":\"内存容量:4GB\"},{\"name\":\"内存容量\",\"value\":\"16GB\",\"search_value\":\"内存容量:16GB\"}]}' curl -XPUT http://localhost:9200/products/_doc/92?pretty -H'Content-Type: application/json' -d'{\"id\":92,\"type\":\"normal\",\"category_id\":13,\"title\":\"AData\\/威刚 8G DDR4 2400 (XPG 单条） \",\"long_title\":\"ADATA\\/威刚 8G 16G 3200 3000 2666 2400游戏台式机内存条DDR4套条\",\"on_sale\":true,\"rating\":5,\"sold_count\":0,\"review_count\":0,\"price\":\"489.00\",\"category\":[\"电脑配件\",\"内存\"],\"category_path\":\"-10-\",\"description\":\"\",\"skus\":[{\"title\":\"8GB DDR4 2400\",\"description\":\"8GB DDR4 2400 XPG单条\",\"price\":\"489.00\"},{\"title\":\"4GB 万紫千红 DDR4 2133\",\"description\":\"4GB 万紫千红 DDR4 2133\",\"price\":\"489.00\"}],\"properties\":[{\"name\":\"品牌名称\",\"value\":\"威刚\",\"search_value\":\"品牌名称:威刚\"},{\"name\":\"传输类型\",\"value\":\"DDR4\",\"search_value\":\"传输类型:DDR4\"},{\"name\":\"内存容量\",\"value\":\"4GB\",\"search_value\":\"内存容量:4GB\"},{\"name\":\"内存容量\",\"value\":\"8GB\",\"search_value\":\"内存容量:8GB\"}]}' curl -XPUT http://localhost:9200/products/_doc/93?pretty -H'Content-Type: application/json' -d'{\"id\":93,\"type\":\"normal\",\"category_id\":13,\"title\":\"Kingston\\/金士顿 金士顿DDR3 1600 8GB\",\"long_title\":\"Kingston\\/金士顿 DDR3 1600 8G 台式机电脑 三代 内存条 兼容1333\",\"on_sale\":true,\"rat","date":"2020-04-15","objectID":"/105_es_goods_search/:3:1","tags":null,"title":"电商商品信息Elasticsearch索引结构与查询示例","uri":"/105_es_goods_search/"},{"categories":null,"content":"查询 # 直接用curl进行查询请求 curl -XGET http://localhost:9200/products/_search/?pretty -H 'Content-Type: application/json' -d '{ \"query\": { \"bool\": { \"filter\": [ { \"term\": { \"on_sale\": true } } ], \"must\": [ { \"multi_match\": { \"query\": \"金士顿\", \"type\": \"best_fields\", \"fields\": [ \"title^3\", \"long_title^2\", \"category^2\", \"description\", \"skus_title\", \"skus_description\", \"properties_value\" ] } } ] } }, \"aggs\": { \"properties_count\": { \"nested\": { \"path\": \"properties\" }, \"aggs\": { \"properties_name\": { \"terms\": { \"field\": \"properties.name\" }, \"aggs\": { \"properties_value\": { \"terms\": { \"field\": \"properties.value\" } } } } } } } }' 对上面DSL语句的一些解释: 以金士顿作为关键字在多个字段中进行查询,title^3表示提升从title字段查询出来的结果的权重 properties_count是自定义的聚合结果名称,同理后面的properties_*亦然 properties_count聚合的作用是相当于在查询出来的结果中,将嵌套属性properties全部查询出来 properties_name是在上一层的基础上按properties.name即属性名分组 properties_value同理,在上一层的基础上按属性值分组 查询结果: { \"took\" : 3, \"timed_out\" : false, \"_shards\" : { \"total\" : 1, \"successful\" : 1, \"skipped\" : 0, \"failed\" : 0 }, \"hits\" : { \"total\" : { \"value\" : 2, \"relation\" : \"eq\" }, \"max_score\" : 1.9678952, \"hits\" : [ { \"_index\" : \"products\", \"_type\" : \"_doc\", \"_id\" : \"93\", \"_score\" : 1.9678952, \"_source\" : { \"id\" : 93, \"type\" : \"normal\", \"category_id\" : 13, \"title\" : \"Kingston/金士顿 金士顿DDR3 1600 8GB\", \"long_title\" : \"Kingston/金士顿 DDR3 1600 8G 台式机电脑 三代 内存条 兼容1333\", \"on_sale\" : true, \"rating\" : 5, \"sold_count\" : 0, \"review_count\" : 0, \"price\" : \"239.00\", \"category\" : [ \"电脑配件\", \"内存\" ], \"category_path\" : \"-10-\", \"description\" : \"\", \"skus\" : [ { \"title\" : \"DDR3 1600 8G\", \"description\" : \"DDR3 1600 8G\", \"price\" : \"439.00\" }, { \"title\" : \"DDR3 1600 4G\", \"description\" : \"DDR3 1600 4G\", \"price\" : \"239.00\" }, { \"title\" : \"DDR3 1333 4G\", \"description\" : \"DDR3 1333 4G\", \"price\" : \"259.00\" } ], \"properties\" : [ { \"name\" : \"品牌名称\", \"value\" : \"金士顿\", \"search_value\" : \"品牌名称:金士顿\" }, { \"name\" : \"传输类型\", \"value\" : \"DDR3\", \"search_value\" : \"传输类型:DDR3\" }, { \"name\" : \"内存容量\", \"value\" : \"4GB\", \"search_value\" : \"内存容量:4GB\" }, { \"name\" : \"内存容量\", \"value\" : \"8GB\", \"search_value\" : \"内存容量:8GB\" } ] } }, { \"_index\" : \"products\", \"_type\" : \"_doc\", \"_id\" : \"91\", \"_score\" : 1.6602381, \"_source\" : { \"id\" : 91, \"type\" : \"normal\", \"category_id\" : 13, \"title\" : \"Kingston/金士顿 HX424C15FB/8\", \"long_title\" : \"金士顿 骇客神条 ddr4 2400 8g 台式机 电脑 四代内存条 吃鸡内存\", \"on_sale\" : true, \"rating\" : 5, \"sold_count\" : 0, \"review_count\" : 0, \"price\" : \"399.00\", \"category\" : [ \"电脑配件\", \"内存\" ], \"category_path\" : \"-10-\", \"description\" : \"\", \"skus\" : [ { \"title\" : \"8GB 黑色\", \"description\" : \"8GB 2400 DDR4 黑色\", \"price\" : \"549.00\" }, { \"title\" : \"8GB 绿色\", \"description\" : \"8GB 2400 DDR4 绿色\", \"price\" : \"529.00\" }, { \"title\" : \"16GB\", \"description\" : \"2400 16GB\", \"price\" : \"1299.00\" }, { \"title\" : \"4GB\", \"description\" : \"2400 4GB\", \"price\" : \"399.00\" } ], \"properties\" : [ { \"name\" : \"品牌名称\", \"value\" : \"金士顿\", \"search_value\" : \"品牌名称:金士顿\" }, { \"name\" : \"内存容量\", \"value\" : \"8GB\", \"search_value\" : \"内存容量:8GB\" }, { \"name\" : \"传输类型\", \"value\" : \"DDR4\", \"search_value\" : \"传输类型:DDR4\" }, { \"name\" : \"内存容量\", \"value\" : \"4GB\", \"search_value\" : \"内存容量:4GB\" }, { \"name\" : \"内存容量\", \"value\" : \"16GB\", \"search_value\" : \"内存容量:16GB\" } ] } } ] }, \"aggregations\" : { \"properties_count\" : { \"doc_count\" : 9, \"properties_name\" : { \"doc_count_error_upper_bound\" : 0, \"sum_other_doc_count\" : 0, \"buckets\" : [ { \"key\" : \"内存容量\", \"doc_count\" : 5, \"properties_value\" : { \"doc_count_error_upper_bound\" : 0, \"sum_other_doc_count\" : 0, \"buckets\" : [ { \"key\" : \"4GB\", \"doc_count\" : 2 }, { \"key\" : \"8GB\", \"doc_count\" : 2 }, { \"key\" : \"16GB\", \"doc_count\" : 1 } ] } }, { \"key\" : \"传输类型\", \"doc_count\" : 2, \"properties_value\" : { \"doc_count_error_upper_bound\" : 0, \"sum_other_doc_count\" : 0, \"buckets\" : [ { \"key\" : \"DDR3\", \"doc_count\" : 1 }, { \"key\" : \"DDR4\", \"doc_count\" : 1 } ] } }, { \"key\" : \"品牌名称\", \"doc_count\" : 2, \"properties_value\" : { \"doc_count_error_upper_bound\" : 0, \"sum_other_doc_count\" : 0, \"buckets\" : [ { \"key\" : \"金士顿\", \"doc_count\" : 2 } ] } } ] } } } } ","date":"2020-04-15","objectID":"/105_es_goods_search/:3:2","tags":null,"title":"电商商品信息Elasticsearch索引结构与查询示例","uri":"/105_es_goods_search/"},{"categories":null,"content":"参考资料 《L06 Laravel 教程 - 电商进阶 ( Laravel 6.x )》 ","date":"2020-04-15","objectID":"/105_es_goods_search/:4:0","tags":null,"title":"电商商品信息Elasticsearch索引结构与查询示例","uri":"/105_es_goods_search/"},{"categories":null,"content":"操作环境 下面的程序和运行环境都是使用Laradock部署的 Elasticsearch 7.6.1 Kibana 7.6.1 PHP 7.2 elasticsearch/elasticsearch ~7.6.0 ","date":"2020-04-02","objectID":"/104_es_base/:1:0","tags":null,"title":"Elasticsearch DSL的PHP写法示例","uri":"/104_es_base/"},{"categories":null,"content":"示例 ","date":"2020-04-02","objectID":"/104_es_base/:2:0","tags":null,"title":"Elasticsearch DSL的PHP写法示例","uri":"/104_es_base/"},{"categories":null,"content":"导入数据 所有的DSL语句都在Kibana的Dev Tools工具中执行. # 导入的数据取材自参考资料二 # 书籍文档信息的集合（有以下字段：title（标题）, authors（作者）, summary（摘要）, publish_date（发布日期）和 num_reviews（浏览数） POST /bookdb_index/_bulk {\"index\":{\"_id\":1}} {\"title\":\"Elasticsearch: The Definitive Guide\",\"authors\":[\"clinton gormley\",\"zachary tong\"],\"summary\":\"A distibuted real-time search and analytics engine\",\"publish_date\":\"2015-02-07\",\"num_reviews\":20,\"publisher\":\"oreilly\"} {\"index\":{\"_id\":2}} {\"title\":\"Taming Text: How to Find, Organize, and Manipulate It\",\"authors\":[\"grant ingersoll\",\"thomas morton\",\"drew farris\"],\"summary\":\"organize text using approaches such as full-text search, proper name recognition, clustering, tagging, information extraction, and summarization\",\"publish_date\":\"2013-01-24\",\"num_reviews\":12,\"publisher\":\"manning\"} {\"index\":{\"_id\":3}} {\"title\":\"Elasticsearch in Action\",\"authors\":[\"radu gheorge\",\"matthew lee hinman\",\"roy russo\"],\"summary\":\"build scalable search applications using Elasticsearch without having to do complex low-level programming or understand advanced data science algorithms\",\"publish_date\":\"2015-12-03\",\"num_reviews\":18,\"publisher\":\"manning\"} {\"index\":{\"_id\":4}} {\"title\":\"Solr in Action\",\"authors\":[\"trey grainger\",\"timothy potter\"],\"summary\":\"Comprehensive guide to implementing a scalable search engine using Apache Solr\",\"publish_date\":\"2014-04-05\",\"num_reviews\":23,\"publisher\":\"manning\"} ","date":"2020-04-02","objectID":"/104_es_base/:2:1","tags":null,"title":"Elasticsearch DSL的PHP写法示例","uri":"/104_es_base/"},{"categories":null,"content":"DSL 代码 # 下面这些筛选条件完全是为了举例写法才写这么多的... GET /bookdb_index/_search { \"query\": { \"bool\": { \"must\": [ { \"multi_match\": { \"query\": \"elasticsearch guide\", \"fields\": [] } }, { \"match_phrase_prefix\": { \"title\": { \"query\": \"elastic\", \"slop\": 3, \"max_expansions\": 10 } } }, { \"wildcard\": { \"title\": \"elastic*\" } }, { \"regexp\": { \"title\": \"elastic.*ch\" } }, { \"range\": { \"num_reviews\": { \"from\": 10, \"to\": 20, \"include_lower\": true, \"include_upper\": true } } } ], \"must_not\": [ { \"terms\": { \"publish_date\": [ \"2015-12-04\" ] } } ], \"should\": [ { \"match\": { \"publisher\": \"manning\" } } ], \"filter\": [ { \"exists\": { \"field\": \"authors\" } }, { \"range\": { \"num_reviews\": { \"gte\": 12, \"lt\": 30 } } } ] } }, \"highlight\": { \"fields\": { \"title\": {}, \"summary\": {} } }, \"aggs\": { \"sum_of_reviews\": { \"sum\": { \"field\": \"num_reviews\" } }, \"group_of_date\": { \"terms\": { \"field\": \"publish_date\", \"size\": 10 }, \"aggs\": { \"avg_of_reviews\": { \"avg\": { \"field\": \"num_reviews\" } } } } } } 结果 { \"took\" : 17, \"timed_out\" : false, \"_shards\" : { \"total\" : 1, \"successful\" : 1, \"skipped\" : 0, \"failed\" : 0 }, \"hits\" : { \"total\" : { \"value\" : 2, \"relation\" : \"eq\" }, \"max_score\" : 5.7691345, \"hits\" : [ { \"_index\" : \"bookdb_index\", \"_type\" : \"book\", \"_id\" : \"1\", \"_score\" : 5.7691345, \"_source\" : { \"title\" : \"Elasticsearch: The Definitive Guide\", \"authors\" : [ \"clinton gormley\", \"zachary tong\" ], \"summary\" : \"A distibuted real-time search and analytics engine\", \"publish_date\" : \"2015-02-07\", \"num_reviews\" : 20, \"publisher\" : \"oreilly\" }, \"highlight\" : { \"title\" : [ \"\u003cem\u003eElasticsearch\u003c/em\u003e: The Definitive \u003cem\u003eGuide\u003c/em\u003e\" ] } }, { \"_index\" : \"bookdb_index\", \"_type\" : \"book\", \"_id\" : \"3\", \"_score\" : 5.2062206, \"_source\" : { \"title\" : \"Elasticsearch in Action\", \"authors\" : [ \"radu gheorge\", \"matthew lee hinman\", \"roy russo\" ], \"summary\" : \"build scalable search applications using Elasticsearch without having to do complex low-level programming or understand advanced data science algorithms\", \"publish_date\" : \"2015-12-03\", \"num_reviews\" : 18, \"publisher\" : \"manning\" }, \"highlight\" : { \"summary\" : [ \"build scalable search applications using \u003cem\u003eElasticsearch\u003c/em\u003e without having to do complex low-level programming\" ], \"title\" : [ \"\u003cem\u003eElasticsearch\u003c/em\u003e in Action\" ] } } ] }, \"aggregations\" : { \"sum_of_reviews\" : { \"value\" : 38.0 }, \"group_of_date\" : { \"doc_count_error_upper_bound\" : 0, \"sum_other_doc_count\" : 0, \"buckets\" : [ { \"key\" : 1423267200000, \"key_as_string\" : \"2015-02-07T00:00:00.000Z\", \"doc_count\" : 1, \"avg_of_reviews\" : { \"value\" : 20.0 } }, { \"key\" : 1449100800000, \"key_as_string\" : \"2015-12-03T00:00:00.000Z\", \"doc_count\" : 1, \"avg_of_reviews\" : { \"value\" : 18.0 } } ] } } } ","date":"2020-04-02","objectID":"/104_es_base/:2:2","tags":null,"title":"Elasticsearch DSL的PHP写法示例","uri":"/104_es_base/"},{"categories":null,"content":"PHP 代码 // 要事先安装好elasticsearch/elasticsearch扩展包,注意:扩展包要匹配当前使用的Elasticsearch版本 use \\Elasticsearch\\ClientBuilder; $client = ClientBuilder::fromConfig([ 'hosts' =\u003e ['elasticsearch:9200'], 'retries' =\u003e 2, 'handler' =\u003e ClientBuilder::singleHandler() ]); $search = [ // 指定索引 'index' =\u003e 'bookdb_index', // 搜索主体 'body' =\u003e [ 'query' =\u003e [ 'bool' =\u003e [ // `must`里的每个条件都要满足 'must' =\u003e [ // 多字段条件 [ 'multi_match' =\u003e [ 'query' =\u003e 'elasticsearch guide', // 空数组表示搜索任意字段 'fields' =\u003e [] // 也可以指定搜索那些字段 // 'fields' =\u003e ['title', 'summary'] ] ], // 短语前缀条件 [ 'match_phrase_prefix' =\u003e [ // 搜索`title`字段以`elastic`开头的文档 'title' =\u003e [ 'query' =\u003e 'elastic', // 调整单词顺序和不太严格的相对位置,大概是查询的分词之间最多能容纳多少个别的词 'slop' =\u003e 3, // 用来限制查询项的数量，降低对资源需求的强度 'max_expansions' =\u003e 10 ] ] ], // 通配符条件 [ 'wildcard' =\u003e [ // `title`字段以`elastic`开头 'title' =\u003e 'elastic*' ] ], // 正则条件 [ 'regexp' =\u003e [ 'title' =\u003e 'elastic.*ch' ] ], // 范围条件 [ 'range' =\u003e [ // 10≤`num_reviews`≤20 'num_reviews' =\u003e [ 'from' =\u003e 10, 'to' =\u003e 20, // 包括边界值 'include_lower' =\u003e true, 'include_upper' =\u003e true ] ] ] ], // 必须不在`must_not`的条件范围内 'must_not' =\u003e [ [ 'terms' =\u003e [ 'publish_date' =\u003e ['2015-12-04'] ] ] ], // `should`里的条件只要不跟`must`和`must_not`的冲突,那满足`should`的也算(非必须满足) 'should' =\u003e [ [ 'match' =\u003e [ 'publisher' =\u003e 'manning' ] ] ], // 对上面的筛选结果进行补充筛选 'filter' =\u003e [ // 要求存在`authors`字段 [ 'exists' =\u003e [ 'field' =\u003e 'authors' ] ], // 范围条件的另一种写法 [ 'range' =\u003e [ 'num_reviews' =\u003e [ 'gte' =\u003e 12, 'lt' =\u003e 30 ] ] ] ] ] ], // 返回相关部分的标记html 'highlight' =\u003e [ 'fields' =\u003e [ // 键是表示要返回哪些字段的相关标记,值是空对象 'title' =\u003e new stdClass(), 'summary' =\u003e new stdClass() ] ], // 聚合 'aggs' =\u003e [ // 符合全部条件的文件的`num_reviews`字段值的总和,这个总和以`sum_of_reviews`记录下来(这个键名是自定义的) 'sum_of_reviews' =\u003e [ 'sum' =\u003e [ 'field' =\u003e 'num_reviews', ] ], // 分组 'group_of_date' =\u003e [ // 按`publish_date`字段分组 'terms' =\u003e [ 'field' =\u003e 'publish_date', 'size' =\u003e 10 ], // 计算每个小组的`num_reviews`字段平均分 'aggs' =\u003e [ 'avg_of_reviews' =\u003e [ 'avg' =\u003e [ 'field' =\u003e 'num_reviews' ] ] ] ] ] ] ]; echo '\u003cpre\u003e'; var_dump($client-\u003esearch($search)); 输出 array(5) { [\"took\"]=\u003e int(18) [\"timed_out\"]=\u003e bool(false) [\"_shards\"]=\u003e array(4) { [\"total\"]=\u003e int(1) [\"successful\"]=\u003e int(1) [\"skipped\"]=\u003e int(0) [\"failed\"]=\u003e int(0) } [\"hits\"]=\u003e array(3) { [\"total\"]=\u003e array(2) { [\"value\"]=\u003e int(2) [\"relation\"]=\u003e string(2) \"eq\" } [\"max_score\"]=\u003e float(5.7691345) [\"hits\"]=\u003e array(2) { [0]=\u003e array(6) { [\"_index\"]=\u003e string(12) \"bookdb_index\" [\"_type\"]=\u003e string(4) \"book\" [\"_id\"]=\u003e string(1) \"1\" [\"_score\"]=\u003e float(5.7691345) [\"_source\"]=\u003e array(6) { [\"title\"]=\u003e string(35) \"Elasticsearch: The Definitive Guide\" [\"authors\"]=\u003e array(2) { [0]=\u003e string(15) \"clinton gormley\" [1]=\u003e string(12) \"zachary tong\" } [\"summary\"]=\u003e string(50) \"A distibuted real-time search and analytics engine\" [\"publish_date\"]=\u003e string(10) \"2015-02-07\" [\"num_reviews\"]=\u003e int(20) [\"publisher\"]=\u003e string(7) \"oreilly\" } [\"highlight\"]=\u003e array(1) { [\"title\"]=\u003e array(1) { [0]=\u003e string(53) \"Elasticsearch: The Definitive Guide\" } } } [1]=\u003e array(6) { [\"_index\"]=\u003e string(12) \"bookdb_index\" [\"_type\"]=\u003e string(4) \"book\" [\"_id\"]=\u003e string(1) \"3\" [\"_score\"]=\u003e float(5.2062206) [\"_source\"]=\u003e array(6) { [\"title\"]=\u003e string(23) \"Elasticsearch in Action\" [\"authors\"]=\u003e array(3) { [0]=\u003e string(12) \"radu gheorge\" [1]=\u003e string(18) \"matthew lee hinman\" [2]=\u003e string(9) \"roy russo\" } [\"summary\"]=\u003e string(152) \"build scalable search applications using Elasticsearch without having to do complex low-level programming or understand advanced data science algorithms\" [\"publish_date\"]=\u003e string(10) \"2015-12-03\" [\"num_reviews\"]=\u003e int(18) [\"publisher\"]=\u003e string(7) \"manning\" } [\"highlight\"]=\u003e array(2) { [\"summary\"]=\u003e array(1) { [0]=\u003e string(114) \"build scalable search applications using Elasticsearch without having to do complex low-level programming\" } [\"title\"]=\u003e array(1) { [0]=\u003e string(32) \"Elasticsearch in Action\" } } } } } [\"aggregations\"]=\u003e array(2) { [\"sum_of_reviews\"]=\u003e array(1) { [\"value\"]=\u003e float(38) } [\"group_of_date\"]=\u003e array(3) { [\"doc_count_error_upper_bound\"]=\u003e int(0) [\"sum_other_doc_count\"]=\u003e int(0) [\"buckets\"","date":"2020-04-02","objectID":"/104_es_base/:2:3","tags":null,"title":"Elasticsearch DSL的PHP写法示例","uri":"/104_es_base/"},{"categories":null,"content":"参考资料 下面的资料使用的Elasticsearch版本较低,有部分功能在当前7.x版本已被废弃,需要有选择地参考和使用 ElasticSearch学习文档 这篇是基础,初学者大概了解下就好,可以当作手册使用 23个最有用的Elasticsearch检索技巧 这篇很重要,帮你快速上手DSL 《Elasticsearch: 权威指南》 基于2.x版 Elasticsearch-PHP php的ES扩展包说明文档 ","date":"2020-04-02","objectID":"/104_es_base/:3:0","tags":null,"title":"Elasticsearch DSL的PHP写法示例","uri":"/104_es_base/"}]